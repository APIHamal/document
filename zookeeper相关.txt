#Zookeeper集群中存在三种角色Leader、Follower、Observer(类似于Master/Slave主备模式)
	(1)Leader是整个集群的核心角色负责接收客户端的请求并
 	   将消息广播到集群中的其他节点(相当于Master节点)
	(2)Follower作为跟随着负责接收Leader节点的广播消息并且参与选举和"写入过半"策略
	(3)Observer与Follower十分类似负责接收Leader的广播消息并进行写操作
	   但是Observer不参与Leader发起的"写入过半策略"
#Zookeeper中的数据节点Znode分为持久化节点、非持久化节点
	(1)持久化节点除非显式的移除否则会一直存在
	(2)非持久化节点通常由客户端创建并与客户端的生命周期绑定
	   当客户端断开连接后并在sessiontimeOut指定的时间内再次
	   连接到服务器则session生命周期结束并且创建的对应的Znode
	   节点会自动的进行销毁
#ZAB协议的核心内容
	对于客户端的请求由leader节点进行接收并且leader节点负责将该消息
	广播到集群中的follower节点(此时事物并未提交)并且等待follower节点
	反馈消息如果leader节点判断所有的follower节点成功的"写入过半"则会
	继续发送一个commit消息要求follower节点进行事务的提交
####崩溃恢复模式下选择拥有最大事务提案ID(ZXID)的机器称为Leader节点
#zookeeper集群中的进程存在三种状态
	looking
		集群中不存在leader节点时需要进行选举此时进程集合都是leading状态
		这种状态通常处于ZAB协议中的恢复模式
	following
		集群中存在leader节点时所有的looking节点会切换到following状态
		并开始和leader节点保持同步
	leader
		节点选举成功时会从looking状态切换到leading状态节点称为集群的领导者
		待follower节点同步完成后开始进行处理
		这个阶段处于ZAB协议中的消息广播模式
#zookeeper基本的操作命令
	create [-s] [-e] path [data] [acl]
		zookeeper创建节点的命令
		[可选]-s表示创建顺序节点
		[可选]-e表示创建一个临时节点
			#不指定-s或者-e时创建的是持久化的节点
		path为指定的路劲必须以/开始
		data为指定的节点设置数据
		acl表示对节点的权限控制
	ls path
		ls命令列出节点的下一级直接子节点
	get path
		get命令获取节点的数据内容
	set path data [version]
		set给指定的节点设置数据内容
		[version]用来确定节点数据的版本号(可以类比CAS的思想)
	delete path [version]
		delete命令用来删除指定的节点
		[version]参数用来确定节点的版本号(可以类比CAS的思想)
	stat path
		stat命令用来查看节点的相关元数据信息
		例如版本号、创建时间等基本信息