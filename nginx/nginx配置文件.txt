#设置nginx的全局域名解析器
#域名解析器可以解析[upstream]中的域名并进行缓存
#valid表示DNS缓存更新时间(达到该时间后会进行更新)
#默认情况下nginx会同时查找ipv4与ipv6的地址(ipv6=off可以关闭ipv6地址查找)
#resolver 10.10.10.10 valid=30s ipv6=off;
#配置域名解析的超时时间
#resolver_timeout 10s;

#配置nginx工作进程的数量通常应该设置成与cpu核心数量相同
#[number]具体的数量例如(worker_processes 8;表示创建8个工作进程)
#[auto]表示由nginx自动设置(nginx会将数量设置成cpu核心数)
worker_processes  auto;

#设置nginx的工作进程优先级
#通常情况下进程优先级越高cpu分配的时间片越多(优先级取值范围[-20,19]数字越小优先级越高)
worker_priority -5;

#设置工作进程与CPU的亲缘性使工作进程与CPU进行绑定
#指令值为auto时由nginx自动的进行绑定(该属性只能在linux和FreeBSD中使用)
worker_cpu_affinity auto;

#设置nginx的错误日志
error_log  logs/error.log  info;

#nginx事件模型处理相关配置
events {
	#设置每个nginx工作进程可处理并发连接的最大数
    worker_connections  1024;
}

#配置http相关的服务
http {
	#引入MIME媒体类型的映射文件(nginx根据文件名后缀寻找对应的MIME媒体类型)
	#对应的值会被添加到[content-type]响应头部中
    include		mime.types;
    default_type  application/octet-stream;
	
	#http请求头读取的超时时间(指定时间内未读取完则表示超时[默认是60s(秒为单位)])
	client_header_timeout 10s;
	
	#http请求体的读取超时时间(默认为60s)
	client_body_timeout 10s;
	
	#设置HTTP请求体的最大值(默认为1M)
	#当请求头中(content-length)超过该设定的值时直接返回HTTP状态码[408]
	#当设置值为[0]时表示没有限制
	#当上传大文件时该值需要被修改否则文件无法上传成功
	client_max_body_size	5m;
	
	#开启零拷贝的特性可以提高静态资源的处理能力
    sendfile	on;
	#启用最小传输限制功能
	tcp_nopush	on;
	
	#tcp连接内持续没有数据传输的最大时间超过这个时间连接将被关闭(默认是75S[秒为单位])
    keepalive_timeout  60;
	
	#配置虚拟服务器(server指令相当于一个虚拟的服务器[实际上就是监听指定的端口])
    server {
		#配置监听的ServerSocket套接字的端口
		#*:80表示监听任意IP地址的80端口(192.168.168.168:80表示只监听访问192.168.168.168的80请求)
		#reuseport开启套接字分片的功能可以避免发起大量tcp短链接时产生惊群效应
		#rcvbuf表示socket接收缓冲区的大小默认为8k当接收的数据量较大时可适当调整
		#sndbuf表示socket发送缓冲区的大小默认为8k当发送数据量比较大时可适当调整
        listen		*:80 reuseport rcvbuf=8k sndbuf=8k;
		#配置转发的主机名(对应与http请求头中的host属性)
        server_name  lizhengpeng.com;
		
		#常规的IP限制配置样例
		#指只允许ip地址为192.168.168.0-192.168.168.168.24网段的IP方式
		allow 192.168.168.0/24;
		#指不允许除[allow]配置外的IP地址进行访问
		deny all;
		
		###配置url的匹配规则
		##URL具备如下常用匹配规则
		#  [=|~|~*|@]统称为修饰符
		#  1)location /images/ 
		#	表示无修饰符(无修饰符匹配时表示以path开始的路径都被匹配)
		#	因此上述表示所有以/images/开始的路径都会被匹配
		#  2)location = /images/
		#    精确匹配表示只有url为/images/时才进入该匹配
		#  3)location ~ /images/.*(注意该表达式区分大小写)
		#    正则表达式匹配
		#	表示路径符合正则表达式/images/.*时进入匹配
		#	!!!注意该模式区分大小写
		#  4)location ~* /images/(正则表达式匹配并且不分区大小写)
		#	正则表示匹配表示符合正则表达式会进入匹配
		#    !!!注意该模式不区分大小写
		#  5)location @ /images/
		#    内部路径配置
		#	定义一个转发路径可在nginx内部进行转发
		###配置root与alias区别
		##root配置的是根目录
		##alias相当于设置目录的一个别名
		#1)location /static/ {
		#	root /usr/local/server;
		#	#该配置相当于查询/static/目录下文件时实际上会在目录 
		#	#/usr/local/server/static下进行文件的查找
		#}
		#2)location /static/ {
		#	alias /usr/local/static/;
		#	#该配置相当于查询/static/目录下文件时实际上会在目录
		#	#/usr/local/static/下进行查找
		#}
		
		#搭建nginx文件下载环境
		location /download/ {
			#配置nginx文件的下载路径
			root /usr/local/web-server/download;
			#强制nginx下载文件时输出MIME类型为二进制文件类型
			types {}
			default_type application/octet-stream;
			#添加响应头部使nginx进行文件的下载
			add_header content-disposition: 'attachment';
			#限制文件下载速度为1M
			limit_rate 1m;
			#当客户端下载速度达到2M时进入限速模式
			limit_rate_after 2m;
			#客户端引发传输超时的时间
			send_timeout 20s;
		}
		
		#默认的路由匹配规则
        #location / {
		#   #配置web服务的根目录位置
        #   #root   /usr/local/web-server;
		#	#index指令用来配置默认的首页文件的文件名(存在多个时依次进行查找)
        #   #index  index.html index.htm;
		#	
		#	#开启HTTPS功能时如果访问80端口则强制跳转使用HTTPS
		#	#[$1]表示引用(regex)中的内容相当于正则表达式的引用
		#	rewrite ^/(.*) https://$host$1 permanent;
        #}
		
		#搭建nginx反向代理的环境配置
		upstream back_server {
			server 192.168.168.168:8080;
			server 192.168.168.169:8080;
		}
		
		#搭建nginx反向代理环境配置
		location ~ / {
			#启用响应数据缓冲区
			proxy_buffering on;
			#设置每个HTTP请求读取上游服务器响应数据的缓冲区的数量为8并且每个缓冲区大小为8k
			proxy_buffers 8 8k;
			#设置每个HTTP请求读取响应数据第一部分缓冲区大小为8k
			proxy_buffer_size 8k;
			#设置每个HTTP请求每秒钟读取上游服务器响应数据的流量(0表示不限制若限制可使用512k或者1m之等值)
			proxy_limit_rate 0;
			#启用客户端HTTP请求读取缓冲区功能
			proxy_request_buffering on;
			#启用HTTP/1.1版本与上游服务器之间进行通信
			proxy_http_version 1.1;
			#设置与上游服务器建立连接的超时时间
			proxy_connect_timeout 5s;
			#从上游服务器获取响应数据的超时时间间隔(每两次读取到数据之间的时间间隔)
			proxy_read_timeout 10s;
			#从上游服务器发送请求的超时时间间隔(每两次发送数据成功的超时时间间隔)
			proxy_send_timeout 10s;
			#设置发送给上游服务器的请求头钟的HOST字段为客户端请求字段
			proxy_set_header host $host:$server_port;
			#设置发送给上游服务器的头属性字段Cookie为客户端请求头字段的值
			proxy_set_header cookie $http_cookie;
			#设置发送给上游服务器的请求头字段[x-real-ip]为客户端的IP地址(上游服务器不应该从套接字钟获取客户端)
			proxy_set_header x-real-ip $remote_addr;
			#设置发送给上游服务器中的[X-Forwarded-For]字段值为客户端请求中[X-Forwarded-For]如果该值不存在则等于$remote_addr
			proxy_set_header X-Forwarded-For $remote_addr;
			
			#进行代理请求的转发
			proxy_pass http://back_server;
		}
    }
	
	#开启nginx的http功能的支持
    #server {
	#	#表示启用SSL功能支持(推荐使用[listen 443 ssl reuseport;]开启SSL支持)
	#	#ssl on;
	#
	#    #https默认的监听端口
    #    listen       443 ssl;
    #    server_name  lizhengpeng.com;
	#	
	#	#配置SSL证书的文件(证书包含站点CA[签发机构]以及数字签名和公钥信息)
    #    ssl_certificate		    ca/server.crt;
	#	#配置证书公钥对应的私钥文件
    #    ssl_certificate_key		ca/server.key;
	#	#配置站点证书私钥密码的文件
	#	#生成私钥文件时可以选择是否输入密码
	#	#如果输入密码则此文件存放生成私钥时的密码
	#	#ssl_password_file password_file;
	#	
	#	#配置SSL缓存以及超时时间
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
	#	
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
